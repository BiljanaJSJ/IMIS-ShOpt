
R version 3.5.0 (2018-04-23) -- "Joy in Playing"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> 
> rm(list = ls(all = TRUE))
> 
> 
> source("makeSSElik.R")
> source("IMIS.R")
> source("IMIS.opt.colloc.x0proc.R")
> source("IMIS.opt.colloc.proc-3optimizers.general.R")
> source("Two-stage-FhN.R")# also has the full parameter functions
> source("fhn-model-set-up-x0proc-Normal(c)-2SDs.R")
> source("FhN-model-set-up-as-ode-x0proc-thetalik-2SD.R")
> source("makeSSElik.R")
> source("makeSSE.R")
> 
> # include an ode solver package
> library(deSolve)
> library(mvtnorm)
> library(coda)
> library(deSolve)
> library(MASS)
> library(CollocInfer)
Loading required package: fda
Loading required package: splines
Loading required package: Matrix

Attaching package: ‘fda’

The following object is masked from ‘package:graphics’:

    matplot


Attaching package: ‘CollocInfer’

The following object is masked _by_ ‘.GlobalEnv’:

    make.SSElik

> 
> 
> 
> #library(snow)
> 
> #set up the FHN functions
> fhn<- make.FHN()
> make.fhn=make.FHN
> #make some fake data
> times = seq(0,20,0.2) 
> pars=c(.2,.2,3,.05,.05,-1,1)
> parnames =names(pars)=c("a","b","c","sdV","sdR","V0","R0")
> print("Note that the parameter labelled 'sd' is actually a variance.  will fix this eventually")
[1] "Note that the parameter labelled 'sd' is actually a variance.  will fix this eventually"
> x0	= c(-1,1) 
> names(x0) = c("V","R")
> y	= lsoda(x0,times,fhn$fn.ode,pars) 
> #data = y	= y[,2:3] 
> #data[,1] = y[,1] + sqrt(pars["sdV"])*matrix(rnorm(dim(y)[1]),length(times),1)
> #data[,2] = y[,2] + sqrt(pars["sdR"])*matrix(rnorm(dim(y)[1]),length(times),1)
> 
> data = y[,2:3] + matrix(rnorm(dim(y)[1]*2,0,sqrt(.05^2)),length(times),2)
> 
> 
> #plot(times,data[,1])
> #lines(times,data[,2])
> 
> #set up the parameter estimation from using colloInfer
> lambda=1000
> 
> #create the basis functions using B-splines
> knots = knots = seq(0,20,1) 
> 
> norder= 3									# order of the b-spline basis
> nbasis = length(knots) +norder -2           # number of basis functions
> range = c(0,max(times))						# time span of the observations
> bbasis = create.bspline.basis(range=range, nbasis=nbasis, norder=norder, breaks=knots)
> fd.data = array(data,c(nrow(data),1,ncol(data)))
> DEfd = Data2fd(y=fd.data,argvals=times,basisobj=bbasis,fdnames = list(NULL,NULL, colnames(data)))
> if(!exists("DEfd",where=1)){# then the data2fd line failed - this can occur when there are unobserved variables
+   data.temp=array(0,dim(fd.data))
+   data.temp[,,apply(is.na(fd.data),3,sum)<(dim(fd.data)[1]-2)]    =fd.data[,,apply(is.na(fd.data),3,sum)<(dim(fd.data)[1]-2)]
+   DEfd.temp = Data2fd(data.temp,times,bbasis,fdnames = list(NULL,NULL, colnames(data)))	
+ }		
> #obtain initial coefficients
> coefs = DEfd$coefs
> colnames(coefs) = colnames(data)
> 
> fhn<- make.FHN()
> #set up the lik object
> lik=make.SSElik.with.prior.and.sd()
> lik$bvals = eval.basis(times,bbasis)
> ###lik$bvals[1,] = 0###########because I need to put all of the dlik/dc(1) into dlik/dp for X(0)
> lik$more	= make.id() 
> lik$more$weights = array(1,dim(data)) 
> lik$more$bvals  = eval.basis(times,bbasis,0)     ######## needed only if x0 is a parameter
> lik$more$dbvals = eval.basis(times,bbasis,1)    ######## needed only if x0 is a parameter
> lik$x0index = c(6,7)  # index for the initial conditions
> proc=make.SSEproc.FHN()
> proc$bvals=lik$bvals
> qpts =knots
> qwts = rep(diff(range(times))/length(knots),length(knots))
> qwts = qwts %*% t(lambda)
> 
> 
> #set up the proc object
> proc$more = fhn 
> proc$more$weights = qwts 
> proc$more$qpts	= qpts 
> proc$more$parnames	= names(pars[1:5]) 
> proc$more$names	= c("V","R")
> proc$bvals = list(bvals=eval.basis(proc$more$qpts,bbasis,0) ,dbvals = eval.basis(proc$more$qpts,bbasis,1))
> print("Note that the lambda value ignored since proc is supplied")
[1] "Note that the lambda value ignored since proc is supplied"
> 
> # end of FDA set up stuff
> # smoothing based optimizer control options
> 
> control=list()
> control$trace=0
> control$iter.max=1000
> control$eval.max=1e3
> control$rel.tol=1e-8
> control.in=control
> control.in$rel.tol = 1e-12
> control.in$iter.max = 1000
> control.out=control
> control.out$trace=1
> 
> colnames(coefs) = names(x0)
> 
> #IMIS-ShOpt input parameters
> B=700
> B.re=10000
> number_k=150
> D=4
> parnames = names(pars)
> datamatrix=data
> plots=3
> likelihood.w.fit=NULL
> ncoefs=2
> twostage=twostage.optim.fhn
> 
> #output<- IMIS.opt.colloc.3optimizers(B, B.re, number_k, D,parnames ,lik=lik,proc=proc,coefs=coefs,datamatrix=data,plots=3,ncoefs=ncoefs, twostage=twostage,  likelihood.w.fit=likelihood.w.fit)	
> 
> #set up the other input parameter
> other = list()
> other$coefs        = coefs    
> other$lik          = lik         
> other$proc         = proc       
> proc$more$parnames = names(pars) 
> other$control.in   = control.in  
> other$control.out  = control.out 
> other$ncoefs       = ncoefs      
> 
> #set up parallel computing
> library(doParallel)
Loading required package: foreach
Loading required package: iterators
Loading required package: parallel
> cl <- makeCluster(4)
> registerDoParallel(cl)
> 
> 
> clusterCall(cl,function(x) {library(mvtnorm)})
[[1]]
[1] "mvtnorm"   "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[2]]
[1] "mvtnorm"   "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[3]]
[1] "mvtnorm"   "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

[[4]]
[1] "mvtnorm"   "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[7] "methods"   "base"     

> clusterCall(cl,function(x) {library(coda)})
[[1]]
[1] "coda"      "mvtnorm"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "methods"   "base"     

[[2]]
[1] "coda"      "mvtnorm"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "methods"   "base"     

[[3]]
[1] "coda"      "mvtnorm"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "methods"   "base"     

[[4]]
[1] "coda"      "mvtnorm"   "stats"     "graphics"  "grDevices" "utils"    
[7] "datasets"  "methods"   "base"     

> clusterCall(cl,function(x) {library(MASS)})
[[1]]
 [1] "MASS"      "coda"      "mvtnorm"   "stats"     "graphics"  "grDevices"
 [7] "utils"     "datasets"  "methods"   "base"     

[[2]]
 [1] "MASS"      "coda"      "mvtnorm"   "stats"     "graphics"  "grDevices"
 [7] "utils"     "datasets"  "methods"   "base"     

[[3]]
 [1] "MASS"      "coda"      "mvtnorm"   "stats"     "graphics"  "grDevices"
 [7] "utils"     "datasets"  "methods"   "base"     

[[4]]
 [1] "MASS"      "coda"      "mvtnorm"   "stats"     "graphics"  "grDevices"
 [7] "utils"     "datasets"  "methods"   "base"     

> 
> 
> 
> clusterCall(cl,function(x) {library(deSolve)})
[[1]]
 [1] "deSolve"   "MASS"      "coda"      "mvtnorm"   "stats"     "graphics" 
 [7] "grDevices" "utils"     "datasets"  "methods"   "base"     

[[2]]
 [1] "deSolve"   "MASS"      "coda"      "mvtnorm"   "stats"     "graphics" 
 [7] "grDevices" "utils"     "datasets"  "methods"   "base"     

[[3]]
 [1] "deSolve"   "MASS"      "coda"      "mvtnorm"   "stats"     "graphics" 
 [7] "grDevices" "utils"     "datasets"  "methods"   "base"     

[[4]]
 [1] "deSolve"   "MASS"      "coda"      "mvtnorm"   "stats"     "graphics" 
 [7] "grDevices" "utils"     "datasets"  "methods"   "base"     

> clusterCall(cl,function(x) {library(CollocInfer)})
[[1]]
 [1] "CollocInfer" "fda"         "Matrix"      "splines"     "deSolve"    
 [6] "MASS"        "coda"        "mvtnorm"     "stats"       "graphics"   
[11] "grDevices"   "utils"       "datasets"    "methods"     "base"       

[[2]]
 [1] "CollocInfer" "fda"         "Matrix"      "splines"     "deSolve"    
 [6] "MASS"        "coda"        "mvtnorm"     "stats"       "graphics"   
[11] "grDevices"   "utils"       "datasets"    "methods"     "base"       

[[3]]
 [1] "CollocInfer" "fda"         "Matrix"      "splines"     "deSolve"    
 [6] "MASS"        "coda"        "mvtnorm"     "stats"       "graphics"   
[11] "grDevices"   "utils"       "datasets"    "methods"     "base"       

[[4]]
 [1] "CollocInfer" "fda"         "Matrix"      "splines"     "deSolve"    
 [6] "MASS"        "coda"        "mvtnorm"     "stats"       "graphics"   
[11] "grDevices"   "utils"       "datasets"    "methods"     "base"       

> clusterCall(cl,function(x) {library(lokern)})
[[1]]
 [1] "lokern"      "CollocInfer" "fda"         "Matrix"      "splines"    
 [6] "deSolve"     "MASS"        "coda"        "mvtnorm"     "stats"      
[11] "graphics"    "grDevices"   "utils"       "datasets"    "methods"    
[16] "base"       

[[2]]
 [1] "lokern"      "CollocInfer" "fda"         "Matrix"      "splines"    
 [6] "deSolve"     "MASS"        "coda"        "mvtnorm"     "stats"      
[11] "graphics"    "grDevices"   "utils"       "datasets"    "methods"    
[16] "base"       

[[3]]
 [1] "lokern"      "CollocInfer" "fda"         "Matrix"      "splines"    
 [6] "deSolve"     "MASS"        "coda"        "mvtnorm"     "stats"      
[11] "graphics"    "grDevices"   "utils"       "datasets"    "methods"    
[16] "base"       

[[4]]
 [1] "lokern"      "CollocInfer" "fda"         "Matrix"      "splines"    
 [6] "deSolve"     "MASS"        "coda"        "mvtnorm"     "stats"      
[11] "graphics"    "grDevices"   "utils"       "datasets"    "methods"    
[16] "base"       

> 
> 
> clusterExport(cl,varlist=ls())
> 
> #clusterExport(cl,varlist=list("IMIS.opt.colloc.3optimizers.general","make.fhn","%dopar%","foreach",'make.SSEproc.FHN',"neglogprior","neglogpriorx0","prior","priorx0","likelihood",'times',"dnegnormdp",'make.SSElik',"dneglogpriordpar","lokerns","ksLqudratic",'simex.fun.justc','simex.fun','sample.prior','ginv','dinvgamma','dnegIgammadp',"twostage.optim.fhn",""neq""))
> t1=proc.time()[1]
> #run the IMIS-ShOpt for the FhN with full parameter set to be estimated
> output<- IMIS.opt.colloc.3optimizers.general(B, B.re, number_k, D,parnames ,lik=lik,proc=proc,coefs=coefs,data=data,plots=0,ncoefs=ncoefs, optim.fun1=ident,optim.fun2=smoother.opt,optim.fun3=two.stager,likelihood.w.fit=likelihood.w.fit,other)	
[1] 700
[1] 7000
[1] 7000    7
[1] "herek"
[1] 1
[1] "7000 likelihoods are evaluated in 0.55 minutes"
[1] "Stage   MargLike   UniquePoint   MaxWeight   ESS"
[1]  1.000 -8.326 35.361  0.590  2.615
[1] "Here 1"
[1] 7000
[1] "herei"
[1] 1
[1] "i= 1"
[1] "optimization starting from a value of "
         a          b          c        sdV        sdR         V0         R0 
 0.2962175  0.2070351 11.8752391  1.7953508  0.5886198 -1.2928466  0.7014541 
[1] "here3--matrix--"
[1] "maximum posterior= -288.43 , likelihood= -273.09 , prior= -14.2 , time used= 0.55 minutes, convergence= 0"
[1] "standard optimizer "
         a          b          c        sdV        sdR         V0         R0 
 0.7286302  0.3783482  5.7643903  1.6335555  0.4625444 -0.6116811  0.5581077 
[1] 288.4272
[1] "hybrid GPE step2 "
         a          b          c        sdV        sdR         V0         R0 
 0.6644551  0.4848934  5.6200734  1.6046116  0.4793010 -0.6256328  0.5840966 
[1] 288.1
[1] "hybrid 2stage step2 "
          a           b           c         sdV         sdR          V0 
 0.19728546  0.21229837  3.00980822  0.05727454  0.05721714 -0.98526574 
         R0 
 0.97990717 
[1] -4.954285
[1] "here4----"
[1] "which_remain3"
[1] "herei"
[1] 2
[1] "i= 2"
[1] "optimization starting from a value of "
          a           b           c         sdV         sdR          V0 
 0.28698200  0.04721287 15.18896114  2.32204932  0.69342666 -0.12366690 
         R0 
 0.47365850 
[1] "here3--matrix--"
[1] "maximum posterior= -288.1 , likelihood= -272.48 , prior= -14.37 , time used= 0.55 minutes, convergence= 0"
[1] "standard optimizer "
         a          b          c        sdV        sdR         V0         R0 
 0.6722205  0.4734960  5.6448724  1.6242772  0.4760979 -0.5752535  0.5303881 
[1] 288.1001
[1] "hybrid GPE step2 "
         a          b          c        sdV        sdR         V0         R0 
 1.0519045  0.5797821 14.4024988  3.6405863  0.5733773 -0.4800189  0.4360527 
[1] 336.8328
[1] "hybrid 2stage step2 "
          a           b           c         sdV         sdR          V0 
 0.19728690  0.21231044  3.00980933  0.05727529  0.05721579 -0.98526829 
         R0 
 0.97990862 
[1] -4.954285
[1] "here4----"
[1] "which_remain3"
[1] "herei"
[1] 3
[1] "i= 3"
[1] "optimization starting from a value of "
          a           b           c         sdV         sdR          V0 
 0.01259249  0.84676023 13.77763286  2.25814620  0.82318723 -0.45157381 
         R0 
 0.81095165 
[1] "here3--matrix--"
[1] "maximum posterior= -288.07 , likelihood= -272.15 , prior= -14.55 , time used= 0.55 minutes, convergence= 1"
[1] "standard optimizer "
         a          b          c        sdV        sdR         V0         R0 
 0.7153076  0.4096209  5.5616187  1.6009172  0.4704308 -0.5387724  0.5083205 
[1] 288.0667
[1] "hybrid GPE step2 "
         a          b          c        sdV        sdR         V0         R0 
-0.4444125  0.8129271  5.0924027  1.9972447  0.4739451 -1.0582438  0.9034126 
[1] 303.252
[1] "hybrid 2stage step2 "
          a           b           c         sdV         sdR          V0 
 0.19727961  0.21228321  3.00980373  0.05727434  0.05721668 -0.98529917 
         R0 
 0.97992987 
[1] -4.954286
[1] "here4----"
[1] "which_remain3"
[1] "Here 3"
[1] "here it is"
[1] "herek"
[1] 2
[1]    2.000 -151.688 1774.060    0.037  244.433
[1] "k>1, k= 2"
[1] "here it is"
[1] "herek"
[1] 3
[1]    3.000 -161.219 2006.923    0.015  662.321
[1] "k>1, k= 3"
[1] "here it is"
[1] "herek"
[1] 4
[1]    4.000 -161.220 2225.286    0.007 1196.431
[1] "k>1, k= 4"
[1] "here it is"
[1] "herek"
[1] 5
[1]    5.000 -161.210 2473.019    0.007 1508.850
[1] "k>1, k= 5"
[1] "here it is"
[1] "herek"
[1] 6
[1]    6.000 -161.214 2686.979    0.004 1988.637
[1] "k>1, k= 6"
[1] "here it is"
[1] "herek"
[1] 7
[1]    7.000 -169.789 2907.819    0.004 2238.618
[1] "k>1, k= 7"
[1] "here it is"
[1] "herek"
[1] 8
[1]    8.000 -169.767 3085.348    0.003 2436.237
[1] "k>1, k= 8"
[1] "here it is"
[1] "herek"
[1] 9
[1]    9.000 -169.743 3215.806    0.011 1940.205
[1] "k>1, k= 9"
[1] "here it is"
[1] "herek"
[1] 10
[1]   10.000 -187.171 3307.712    0.003 2600.671
[1] "k>1, k= 10"
[1] "here it is"
[1] "herek"
[1] 11
[1]   11.000 -187.168 3486.214    0.002 2826.234
[1] "k>1, k= 11"
[1] "here it is"
[1] "herek"
[1] 12
[1]   12.000 -187.149 3705.914    0.005 2918.363
[1] "k>1, k= 12"
[1] "here it is"
[1] "herek"
[1] 13
[1]   13.000 -187.150 3800.072    0.002 3332.463
[1] "k>1, k= 13"
[1] "here it is"
[1] "herek"
[1] 14
[1]   14.000 -188.726 3930.449    0.002 3505.841
[1] "k>1, k= 14"
[1] "here it is"
[1] "herek"
[1] 15
[1]   15.000 -188.720 4068.929    0.002 3680.903
[1] "k>1, k= 15"
[1] "here it is"
[1] "herek"
[1] 16
[1]   16.000 -188.711 4274.981    0.002 4111.902
[1] "k>1, k= 16"
[1] "here it is"
[1] "herek"
[1] 17
[1]   17.000 -188.706 4382.381    0.001 4335.137
[1] "k>1, k= 17"
[1] "here it is"
[1] "herek"
[1] 18
[1]   18.000 -188.700 4462.861    0.001 4464.687
[1] "k>1, k= 18"
[1] "here it is"
[1] "herek"
[1] 19
[1]   19.000 -189.057 4587.379    0.001 4688.407
[1] "k>1, k= 19"
[1] "here it is"
[1] "herek"
[1] 20
[1]   20.000 -189.051 4690.584    0.001 4862.378
[1] "k>1, k= 20"
[1] "here it is"
[1] "herek"
[1] 21
[1]   21.000 -189.045 4802.729    0.001 5092.169
[1] "k>1, k= 21"
[1] "here it is"
[1] "herek"
[1] 22
[1]   22.000 -189.038 4924.007    0.001 5339.083
[1] "k>1, k= 22"
[1] "here it is"
[1] "herek"
[1] 23
[1]   23.000 -189.030 4976.522    0.001 5440.518
[1] "k>1, k= 23"
[1] "here it is"
[1] "herek"
[1] 24
[1]   24.000 -189.024 5044.097    0.001 5592.844
[1] "k>1, k= 24"
[1] "here it is"
[1] "herek"
[1] 25
[1]   25.000 -189.017 5137.645    0.001 5827.559
[1] "k>1, k= 25"
[1] "here it is"
[1] "herek"
[1] 26
[1]   26.000 -189.007 5233.163    0.002 5924.649
[1] "k>1, k= 26"
[1] "here it is"
[1] "herek"
[1] 27
[1]   27.000 -189.004 5280.004    0.001 6132.915
[1] "k>1, k= 27"
[1] "here it is"
[1] "herek"
[1] 28
[1]   28.000 -189.001 5366.788    0.001 6337.602
[1] "k>1, k= 28"
[1] "here it is"
[1] "herek"
[1] 29
[1]   29.000 -188.999 5393.368    0.001 6402.350
[1] "k>1, k= 29"
[1] "here it is"
[1] "herek"
[1] 30
[1]   30.000 -188.996 5444.859    0.001 6510.666
[1] "k>1, k= 30"
[1] "here it is"
[1] "herek"
[1] 31
[1]   31.000 -188.995 5524.014    0.001 6704.413
[1] "k>1, k= 31"
[1] "here it is"
[1] "herek"
[1] 32
[1]   32.000 -188.993 5633.841    0.000 7024.875
[1] "k>1, k= 32"
[1] "here it is"
[1] "herek"
[1] 33
[1]   33.000 -188.990 5717.297    0.000 7265.635
[1] "k>1, k= 33"
[1] "here it is"
[1] "herek"
[1] 34
[1]   34.000 -188.987 5739.702    0.000 7317.641
[1] "k>1, k= 34"
[1] "here it is"
[1] "herek"
[1] 35
[1]   35.000 -188.983 5849.972    0.000 7626.606
[1] "k>1, k= 35"
[1] "here it is"
[1] "herek"
[1] 36
[1]   36.000 -188.982 5859.399    0.000 7651.486
[1] "k>1, k= 36"
[1] "here it is"
[1] "herek"
[1] 37
[1]   37.000 -188.981 5907.205    0.000 7791.893
[1] "k>1, k= 37"
[1] "here it is"
[1] "herek"
[1] 38
[1]   38.000 -189.479 5973.193    0.000 8000.728
[1] "k>1, k= 38"
[1] "here it is"
[1] "herek"
[1] 39
[1]   39.000 -189.479 6018.056    0.000 8122.972
[1] "k>1, k= 39"
[1] "here it is"
[1] "herek"
[1] 40
[1]   40.000 -189.476 6073.112    0.000 8300.822
[1] "k>1, k= 40"
[1] "here it is"
[1] "herek"
[1] 41
[1]   41.000 -190.264 6136.180    0.000 8513.638
[1] "k>1, k= 41"
[1] "here it is"
[1] "herek"
[1] 42
[1]   42.000 -190.264 6215.068    0.000 8789.456
[1] "k>1, k= 42"
[1] "here it is"
[1] "herek"
[1] 43
[1]   43.000 -190.261 6288.856    0.000 9061.387
[1] "k>1, k= 43"
[1] "here it is"
[1] "herek"
[1] 44
[1]   44.000 -190.256 6387.478    0.000 9449.776
[1] "k>1, k= 44"
[1] "here it is"
> 
> #save the results
> save(output,file='IMIS_shopt_full_fhn_D10.RData')
> (t=proc.time()[1]-t1)/60
user.self 
  1.22385 
> stopCluster(cl)
> 
> save.image("FhN-IMIS-3-optimizers-no-touch-ups-with-prior.Rdata")
> 
> proc.time()
   user  system elapsed 
 77.015   7.442 458.400 
