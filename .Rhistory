tracedat<-data.frame(x=rnorm(1000,0,1))
tracedat$y<-abs(tracedat$x)*2+rnorm(1000,0,3)
loess_fit <- loess(y ~ x, tracedat)
tracedat$predict_y<-predict(loess_fit)
ggplot(tracedat, aes(x,y)) +
geom_point() +
geom_line(data=tracedat, aes(x,predict_y), color="red", size=1.3) +
scale_x_continuous(limits=c(-3, 3)) +
scale_y_continuous(limits=c(-10, 10))
library(ggplot2)
library(ggplot2)
tracedat<-data.frame(x=rnorm(1000,0,1))
tracedat$y<-abs(tracedat$x)*2+rnorm(1000,0,3)
loess_fit <- loess(y ~ x, tracedat)
tracedat$predict_y<-predict(loess_fit)
ggplot(tracedat, aes(x,y)) +
geom_point() +
geom_line(data=tracedat, aes(x,predict_y), color="red", size=1.3) +
scale_x_continuous(limits=c(-3, 3)) +
scale_y_continuous(limits=c(-10, 10))
draw.curve<-function(cutoff){
a<-ggplot(tracedat, aes(x,y)) +
geom_point() +
geom_line(data=tracedat[tracedat$x<cutoff,], aes(x,predict_y), color="red", size=1.3) +
scale_x_continuous(limits=c(-3, 3)) +
scale_y_continuous(limits=c(-10, 10))
print(a)
}
draw.curve(cutoff=-2)
draw.curve(cutoff=-2)
draw.curve(cutoff=-1)
draw.curve(cutoff=0)
draw.curve(cutoff=1)
draw.curve(cutoff=2)
install.packages("animation")
trace.animate <- function() {
lapply(seq(-3,3,.2), function(i) {
draw.curve(i)
})
}
saveGIF(trace.animate(), interval = .2, movie.name="trace.gif")
owd = setwd(tempdir())
oopt = ani.options(interval = 0.05, nmax = 20)
png("bm%03d.png")
brownian.motion(pch = 21, cex = 5, col = "red", bg = "yellow",
main = "Demonstration of Brownian Motion")
dev.off()
library(animation)
png("bm%03d.png")
brownian.motion(pch = 21, cex = 5, col = "red", bg = "yellow",
main = "Demonstration of Brownian Motion")
dev.off()
im.convert("bm*.png", output = "bm-animation1.gif")
gm.convert("bm*.png", output = "bm-animation2.gif")
getwd()
im.convert("bm*.png", output = "bm-animation1.gif")
library(plyr)
install.packages("plyr")
library(plyr)
install.packages("Rcpp")
751*1127
751*1127/1024
804*5000
7747784+553356
8301140/1024
8301140/1024/1024
104802/1024
A=matrix(c(4,5,6,7,8,9,1,2,3),ncol=3,)
A
B=c(1,1,1)
A-B
B=c(1,2,3)
A-B
A
B
apply(A,1,function(x) {x-B})
A[1,]-B
sapply(1:nrow(A),function(x){A[x,]-B})
A
B
A[1, ]
B
A-B
A[1,]-B
A[2,]-B
A[3,]-B
lapply(1:nrow(A),function(x){A[x,]-B})
do.call(rbind(lapply(1:nrow(A),function(x){A[x,]-B})))
do.call(rbind,lapply(1:nrow(A),function(x){A[x,]-B}))
mean_vec[l] <- mean(X_sample[T_sample==1])
X_sample[T_sample==1]
80000/12
?IMIS
install.packages("IMIS")
library(IMIS)
?IMIS
?optim
?create.bspline.basis
getwd()
out_ls=get(load('samples.RData'))
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0,1.5) )
if (unique(x) %in% c(1,2,3,4,5,6,7)){
h <- hist(x, plot = FALSE,breaks=seq(range(x)[1],range(x)[2],by=0.2))
}else{
h <- hist(x, plot = FALSE,breaks=150)
}
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="cyan", ...)
}
pairs(out_ls$theta[,c(2,1,4)],labels=c(expression(alpha),expression(beta),expression(I(0)),expression(tau)), bg="light blue",
diag.panel=panel.hist,cex.labels = 2.5, font.labels=2,cex.axis=2,upper.panel=NULL,gap = 3)
pairs(out_ls$theta[,c(2,1,4)],labels=c(expression(alpha),expression(beta),expression(I(0)),expression(tau)), bg="light blue",
diag.panel=panel.hist,cex.labels = 2.5, font.labels=2,cex.axis=2,upper.panel=NULL,gap = 3)
20*30000
10*30000
25/5
80*25/100
setwd('D:/Publications/PT-STWNC/parallel-tempering-simulated (2)/CodeSubmit/CodeSubmitExample2_timing')
setwd('D:\Publications\PT-STWNC\parallel-tempering-simulated (2)\CodeSubmit\CodeSubmit\Example2_timing')
getwd()
source('SIR_ST_functions.R')
rnorm(10,0,10)
?rgamma
source('BNN_ST.R')
source('BNN_ST_functions.R')
library(doParallel)
## install.packages("doMC", repos="http://R-Forge.R-project.org")
## library(doMC)
## registerDoMC(cores=4)
data         = read.table("gas-furnace.csv",sep = ",",header =  T)
getwd()
150-117
33/9
150-139
250000-150000
250000-150000+3000
150000-147000
250000+3000
?proc.time
setwd('F:/IMISCode/IMIS_ShOpt')
(1-exp(-1))*3000
